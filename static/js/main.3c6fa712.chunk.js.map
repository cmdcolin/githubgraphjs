{"version":3,"sources":["RepoForm.js","App.js","util.js","serviceWorker.js","index.js"],"names":["RepoForm","onSubmit","initialValues","useForm","form","handleSubmit","pristine","submitting","repo","useField","input","type","disabled","cache","AbortablePromiseCache","QuickLRU","maxSize","fill","requestData","signal","url","fetch","headers","Accept","ret","ok","Error","status","statusText","json","total","total_count","result","workflow_runs","map","m","message","head_commit","slice","branch","head_branch","github_link","id","duration","Date","updated_at","created_at","state","conclusion","getBuilds","counter","BuildDetails","props","build","Object","entries","key","value","startsWith","href","Graph","useState","clickedBuild","setClickedBuild","builds","query","style","display","VegaLite","data","values","patch","spec","signals","push","name","on","events","update","signalListeners","barClick","command","args","$schema","width","height","mark","tooltip","content","selection","grid","bind","encoding","y","field","axis","title","x","timeUnit","scale","nice","color","domain","range","App","useQueryParams","StringParam","setQuery","forceRerender","setCounter","error","setError","setTotal","loading","setLoading","setBuilds","useEffect","a","length","get","undefined","exception","code","console","useGithubActions","res","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c6fa712.chunk.js","sourcesContent":["import React from 'react'\nimport { useForm, useField } from 'react-final-form-hooks'\nimport PropTypes from 'prop-types'\n\nfunction RepoForm({ onSubmit, initialValues }) {\n  const { form, handleSubmit, pristine, submitting } = useForm({\n    onSubmit,\n    initialValues,\n  })\n  const repo = useField('repo', form)\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Repo name</label>\n        <input {...repo.input} />\n      </div>\n\n      <button type=\"submit\" disabled={pristine || submitting}>\n        Submit\n      </button>\n    </form>\n  )\n}\nRepoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({}).isRequired,\n}\n\nexport default RepoForm\n","import React, { useState, useEffect } from 'react'\nimport { useQueryParams, StringParam } from 'use-query-params'\nimport { VegaLite } from 'react-vega'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport RepoForm from './RepoForm'\nimport { isAbortException } from './util'\n\nconst BUILDS_PER_REQUEST = 100\n\nconst cache = new AbortablePromiseCache({\n  cache: new QuickLRU({ maxSize: 1000 }),\n  async fill(requestData, signal) {\n    const { url } = requestData\n    const ret = await fetch(url, {\n      headers: { Accept: 'application/vnd.github.v3+json' },\n      signal,\n    })\n    if (!ret.ok) {\n      throw new Error(`HTTP ${ret.status} ${ret.statusText}`)\n    }\n    const json = await ret.json()\n    return {\n      total: json.total_count,\n      result: json.workflow_runs.map((m) => ({\n        message: (m.head_commit || {}).message.slice(0, 20),\n        branch: m.head_branch,\n        github_link: m.id,\n        duration: (new Date(m.updated_at) - new Date(m.created_at)) / 60000,\n        state: m.conclusion,\n        updated_at: new Date(m.updated_at),\n      })),\n    }\n  },\n})\n\nfunction getBuilds({ counter, repo }) {\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    return `test_data/${counter / BUILDS_PER_REQUEST}.json`\n  } else {\n    return `https://api.github.com/repos/${repo}/actions/runs?page=${\n      counter / BUILDS_PER_REQUEST\n    }&per_page=${BUILDS_PER_REQUEST}`\n  }\n}\n\nfunction useGithubActions(query) {\n  const [counter, setCounter] = useState(0)\n  const [error, setError] = useState()\n  const [total, setTotal] = useState()\n  const [loading, setLoading] = useState(query.repo ? 'Loading...' : '')\n  const [builds, setBuilds] = useState([])\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        if (query && query.repo) {\n          const url = getBuilds({ ...query, counter: builds.length })\n          if (url && total ? total >= builds.length : true) {\n            const { total, result } = await cache.get(url, {\n              url,\n            })\n            if (result.length) {\n              setBuilds([...builds, ...result])\n              setTotal(total)\n              setLoading(`Loading builds...${builds.length}/${total}`)\n            } else {\n              setLoading(undefined)\n              setCounter(0)\n            }\n          } else if (!builds.length) {\n            setError('No builds loaded')\n          } else {\n            setLoading(undefined)\n            setCounter(0)\n          }\n        }\n      } catch (e) {\n        if (!isAbortException(e)) {\n          console.error(e)\n          setError(e.message)\n        }\n      }\n    })()\n  }, [loading, query, counter, builds, total])\n\n  return [loading, error, builds]\n}\n\nfunction BuildDetails(props) {\n  const { build, repo } = props\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Key</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(build).map(([key, value]) => {\n          if (key.startsWith('yearmonth')) return null\n          if (key.startsWith('github')) {\n            const href = `https://github.com/${repo}/actions/runs/${value}`\n            return (\n              <tr>\n                <td>link</td>\n                <td>\n                  <a href={href}>{href}</a>\n                </td>\n              </tr>\n            )\n          }\n          return (\n            <tr key={key}>\n              <td>{`${key}`}</td>\n              <td>{`${value}`}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nfunction Graph(props) {\n  const [clickedBuild, setClickedBuild] = useState()\n  const { builds, query } = props\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <VegaLite\n        data={{ values: builds }}\n        patch={(spec) => {\n          spec.signals.push({\n            name: 'barClick',\n            value: 0,\n            on: [{ events: '*:mousedown', update: 'datum' }],\n          })\n          return spec\n        }}\n        signalListeners={{\n          barClick: (command, args) => {\n            setClickedBuild(args)\n          },\n        }}\n        spec={{\n          $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n          width: 1000,\n          height: 400,\n          mark: { type: 'point', tooltip: { content: 'data' } },\n          data: { name: 'values' },\n          selection: {\n            grid: {\n              type: 'interval',\n              bind: 'scales',\n            },\n          },\n          encoding: {\n            y: {\n              field: 'duration',\n              type: 'quantitative',\n              axis: {\n                title: 'Duration (minutes)',\n              },\n            },\n            x: {\n              field: 'updated_at',\n              timeUnit: 'yearmonthdatehoursminutes',\n              type: 'temporal',\n              scale: {\n                nice: 'week', // add some padding/niceness to domain\n              },\n              axis: {\n                title: 'Date',\n              },\n            },\n            color: {\n              field: 'state',\n              type: 'nominal',\n              scale: {\n                domain: ['success', 'skipped', 'failure', 'canceled'],\n                range: ['#39aa56', '#ff7f0e', '#db4545', '#9d9d9d'],\n              },\n            },\n          },\n        }}\n      />\n      {clickedBuild ? (\n        <BuildDetails repo={query.repo} build={clickedBuild} />\n      ) : null}\n    </div>\n  )\n}\n\nexport default function App() {\n  const [query, setQuery] = useQueryParams({\n    repo: StringParam,\n  })\n  const [, forceRerender] = useState(0)\n  const [loading, error, builds] = useGithubActions(query)\n\n  return (\n    <>\n      <h1>githubgraph-js - GitHub actions graphs</h1>\n      <p>Enter a repo name</p>\n      <RepoForm\n        initialValues={query}\n        onSubmit={(res) => {\n          setQuery(res)\n          forceRerender((c) => c + 1)\n        }}\n      />\n      {error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : loading !== undefined ? (\n        <p>{loading}</p>\n      ) : (\n        <Graph builds={builds} query={query} />\n      )}\n      <a href=\"https://github.com/cmdcolin/githubgraphjs/\">source code</a>\n    </>\n  )\n}\n","// stackoverflow\nexport function filterOutliers(someArray = []) {\n  if (!someArray.length) return []\n  const values = someArray.concat()\n  values.sort((a, b) => a.duration - b.duration)\n\n  const q1 = values[Math.floor(values.length / 4)].duration\n  const q3 =\n    values[Math.min(Math.ceil(values.length * (3 / 4)), values.length - 1)]\n      .duration\n  const iqr = q3 - q1\n\n  const maxValue = q3 + iqr * 3\n  const minValue = q1 - iqr * 3\n\n  return values.filter(\n    (x) => x.duration < maxValue && x.duration > minValue && !!x.finished_at\n  )\n}\nexport function isAbortException(exception) {\n  return (\n    // DOMException\n    exception.name === 'AbortError' ||\n    // standard-ish non-DOM abort exception\n    exception.code === 'ERR_ABORTED' ||\n    // stringified DOMException\n    exception.message === 'AbortError: aborted' ||\n    // stringified standard-ish exception\n    exception.message === 'Error: aborted'\n  )\n}\n","/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { QueryParamProvider } from 'use-query-params'\n\nReactDOM.render(\n  <QueryParamProvider>\n    <App />\n  </QueryParamProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}