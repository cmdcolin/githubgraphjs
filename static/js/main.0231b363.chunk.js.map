{"version":3,"sources":["RepoForm.js","App.js","util.js","serviceWorker.js","index.js"],"names":["RepoForm","onSubmit","initialValues","useForm","form","handleSubmit","pristine","submitting","repo","useField","input","type","disabled","cache","AbortablePromiseCache","QuickLRU","maxSize","fill","requestData","signal","url","headers","fetch","ret","ok","Error","status","statusText","json","total","total_count","result","workflow_runs","map","m","message","head_commit","slice","branch","head_branch","github_link","id","duration","Date","updated_at","created_at","state","getBuilds","counter","BuildDetails","App","useQueryParams","StringParam","query","setQuery","useState","forceRerender","setCounter","error","setError","setTotal","loading","setLoading","builds","setBuilds","useEffect","a","length","get","undefined","exception","name","code","console","useGithubActions","clickedBuild","setClickedBuild","res","c","style","color","display","VegaLite","data","values","patch","spec","signals","push","value","on","events","update","signalListeners","barClick","command","args","$schema","width","height","mark","tooltip","content","selection","grid","bind","encoding","y","field","axis","title","x","timeUnit","scale","nice","domain","range","com","build","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QA4BeA,MAxBf,YAAgD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAAiB,EACQC,YAAQ,CAC3DF,WACAC,kBAFME,EADqC,EACrCA,KAAMC,EAD+B,EAC/BA,aAAcC,EADiB,EACjBA,SAAUC,EADO,EACPA,WAIhCC,EAAOC,YAAS,OAAQL,GAC9B,OACE,0BAAMH,SAAUI,GACd,6BACE,4CACA,0BAAWG,EAAKE,QAGlB,4BAAQC,KAAK,SAASC,SAAUN,GAAYC,GAA5C,YCTN,IAEMM,EAAQ,IAAIC,IAAsB,CACtCD,MAAO,IAAIE,IAAS,CAAEC,QAAS,MACzBC,KAFgC,SAE3BC,EAAaC,GAAS,OAAD,uHACtBC,EAAiBF,EAAjBE,IAAKC,EAAYH,EAAZG,QADiB,SAEZC,MAAMF,EAAK,CAAEC,UAASF,WAFV,WAExBI,EAFwB,QAGrBC,GAHqB,sBAItB,IAAIC,MAAJ,eAAkBF,EAAIG,OAAtB,YAAgCH,EAAII,aAJd,uBAMXJ,EAAIK,OANO,cAMxBA,EANwB,yBAOvB,CACLC,MAAOD,EAAKE,YACZC,OAAQH,EAAKI,cAAcC,KAAI,SAACC,GAAD,MAAQ,CACrCC,SAAUD,EAAEE,aAAe,IAAID,QAAQE,MAAM,EAAG,IAChDC,OAAQJ,EAAEK,YACVC,YAAaN,EAAEO,GACfC,UAAW,IAAIC,KAAKT,EAAEU,YAAc,IAAID,KAAKT,EAAEW,aAAe,IAC9DC,MAAOZ,EAAEY,YAdiB,iDAoBlC,SAASC,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,QAASxC,EAAQ,EAARA,KAC5B,MAAM,gCAAN,OAAuCA,EAAvC,8BACEwC,EA1BuB,IAyBzB,qBAzByB,KAoE3B,SAASC,IACP,OACE,+BACE,+BACE,4BACE,mCACA,uCAGJ,iCAKS,SAASC,IAAO,IAAD,EACFC,YAAe,CACvC3C,KAAM4C,MAFoB,mBACrBC,EADqB,KACdC,EADc,OAIFC,mBAAS,GAA1BC,EAJmB,sBApD9B,SAA0BH,GAAQ,IAAD,EACDE,mBAAS,GADR,mBACxBP,EADwB,KACfS,EADe,OAELF,qBAFK,mBAExBG,EAFwB,KAEjBC,EAFiB,OAGLJ,qBAHK,mBAGxB1B,EAHwB,KAGjB+B,EAHiB,OAIDL,mBAASF,EAAM7C,KAAO,aAAe,IAJpC,mBAIxBqD,EAJwB,KAIfC,EAJe,OAKHP,mBAAS,IALN,mBAKxBQ,EALwB,KAKhBC,EALgB,KAmC/B,OA5BAC,qBAAU,WACP,sBAAC,kCAAAC,EAAA,mEAEMb,IAASA,EAAM7C,KAFrB,qBAGUY,EAAM2B,EAAU,eAAKM,EAAN,CAAaL,QAASe,EAAOI,YACvCtC,KAAQA,GAASkC,EAAOI,QAJvC,iCAKsCtD,EAAMuD,IAAIhD,EAAK,CAC7CA,QANR,gBAKcS,EALd,EAKcA,MAAOE,EALrB,EAKqBA,OAGfiC,EAAU,GAAD,mBAAKD,GAAL,YAAgBhC,KACzB6B,EAAS/B,GACTiC,EAAW,oBAAD,OAAqBC,EAAOI,OAA5B,YAAsCtC,IAVtD,wBAWgBkC,EAAOI,QAGjBL,OAAWO,GACXZ,EAAW,IAHXE,EAAS,oBAZf,0DCxBiB,gBAHUW,ED8CH,EAAD,IC3CfC,MAES,gBAAnBD,EAAUE,MAEY,wBAAtBF,EAAUnC,SAEY,mBAAtBmC,EAAUnC,UDsCJsC,QAAQf,MAAR,MACAC,EAAS,KAAExB,UArBf,kCC3BC,IAA0BmC,ID2B3B,oBAAD,KAyBA,CAACT,EAASR,EAAOL,EAASe,EAAQlC,IAE9B,CAACgC,EAASH,EAAOK,GAsBSW,CAAiBrB,GALtB,mBAKrBQ,EALqB,KAKZH,EALY,KAKLK,EALK,OAMYR,wBAASc,GANrB,mBAMrBM,EANqB,KAMPC,EANO,KAQ5B,OACE,oCACE,sEACA,gDACA,kBAAC,EAAD,CACE1E,cAAemD,EACfpD,SAAU,SAAC4E,GACTvB,EAASuB,GACTrB,GAAc,SAACsB,GAAD,OAAOA,EAAI,QAG5BpB,EACC,uBAAGqB,MAAO,CAAEC,MAAO,QAAUtB,GAC3BG,EACF,2BAAIA,GAEJ,yBAAKkB,MAAO,CAAEE,QAAS,SACrB,kBAACC,EAAA,EAAD,CACEC,KAAM,CAAEC,OAAQrB,GAChBsB,MAAO,SAACC,GAMN,OALAA,EAAKC,QAAQC,KAAK,CAChBjB,KAAM,WACNkB,MAAO,EACPC,GAAI,CAAC,CAAEC,OAAQ,cAAeC,OAAQ,YAEjCN,GAETO,gBAAiB,CACfC,SAAU,SAACC,EAASC,GAClBpB,EAAgBoB,KAGpBV,KAAM,CACJW,QAAS,kDACTC,MAAO,IACPC,OAAQ,IACRC,KAAM,CAAEzF,KAAM,QAAS0F,QAAS,CAAEC,QAAS,SAC3CnB,KAAM,CAAEZ,KAAM,UACdgC,UAAW,CACTC,KAAM,CACJ7F,KAAM,WACN8F,KAAM,WAGVC,SAAU,CACRC,EAAG,CACDC,MAAO,WACPjG,KAAM,eACNkG,KAAM,CACJC,MAAO,uBAGXC,EAAG,CACDH,MAAO,cACPI,SAAU,4BACVrG,KAAM,WACNsG,MAAO,CACLC,KAAM,QAERL,KAAM,CACJC,MAAO,SAGX9B,MAAO,CACL4B,MAAO,QACPjG,KAAM,UACNsG,MAAO,CACLE,OAAQ,CAAC,SAAU,SAAU,UAAW,YACxCC,MAAO,CAAC,UAAW,UAAW,UAAW,iBAMlDzC,EACC,kBAAC1B,EAAD,CACEzC,KAAM6C,EAAM7C,KACZ6G,IAAKhE,EAAMgE,IAAM,MAAQ,MACzBC,MAAO3C,IAEP,MAGR,uBAAG4C,KAAK,8CAAR,gBEvKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC5E,EAAD,OAEF6E,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.0231b363.chunk.js","sourcesContent":["import React from 'react'\nimport { useForm, useField } from 'react-final-form-hooks'\nimport PropTypes from 'prop-types'\n\nfunction RepoForm({ onSubmit, initialValues }) {\n  const { form, handleSubmit, pristine, submitting } = useForm({\n    onSubmit,\n    initialValues,\n  })\n  const repo = useField('repo', form)\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Repo name</label>\n        <input {...repo.input} />\n      </div>\n\n      <button type=\"submit\" disabled={pristine || submitting}>\n        Submit\n      </button>\n    </form>\n  )\n}\nRepoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({}).isRequired,\n}\n\nexport default RepoForm\n","import React, { useState, useEffect } from 'react'\nimport { useQueryParams, StringParam } from 'use-query-params'\nimport { VegaLite } from 'react-vega'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport RepoForm from './RepoForm'\nimport { isAbortException } from './util'\n\nconst BUILDS_PER_REQUEST = 100\n\nconst cache = new AbortablePromiseCache({\n  cache: new QuickLRU({ maxSize: 1000 }),\n  async fill(requestData, signal) {\n    const { url, headers } = requestData\n    const ret = await fetch(url, { headers, signal })\n    if (!ret.ok) {\n      throw new Error(`HTTP ${ret.status} ${ret.statusText}`)\n    }\n    const json = await ret.json()\n    return {\n      total: json.total_count,\n      result: json.workflow_runs.map((m) => ({\n        message: (m.head_commit || {}).message.slice(0, 20),\n        branch: m.head_branch,\n        github_link: m.id,\n        duration: (new Date(m.updated_at) - new Date(m.created_at)) / 60000,\n        state: m.state,\n      })),\n    }\n  },\n})\n\nfunction getBuilds({ counter, repo }) {\n  return `https://api.github.com/repos/${repo}/actions/runs?page=${\n    counter / BUILDS_PER_REQUEST\n  }&per_page=${BUILDS_PER_REQUEST}`\n}\n\nfunction useGithubActions(query) {\n  const [counter, setCounter] = useState(0)\n  const [error, setError] = useState()\n  const [total, setTotal] = useState()\n  const [loading, setLoading] = useState(query.repo ? 'Loading...' : '')\n  const [builds, setBuilds] = useState([])\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        if (query && query.repo) {\n          const url = getBuilds({ ...query, counter: builds.length })\n          if (url && total ? total >= builds.length : true) {\n            const { total, result } = await cache.get(url, {\n              url,\n            })\n            setBuilds([...builds, ...result])\n            setTotal(total)\n            setLoading(`Loading builds...${builds.length}/${total}`)\n          } else if (!builds.length) {\n            setError('No builds loaded')\n          } else {\n            setLoading(undefined)\n            setCounter(0)\n          }\n        }\n      } catch (e) {\n        if (!isAbortException(e)) {\n          console.error(e)\n          setError(e.message)\n        }\n      }\n    })()\n  }, [loading, query, counter, builds, total])\n\n  return [loading, error, builds]\n}\n\nfunction BuildDetails() {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Key</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    </table>\n  )\n}\n\nexport default function App() {\n  const [query, setQuery] = useQueryParams({\n    repo: StringParam,\n  })\n  const [, forceRerender] = useState(0)\n  const [loading, error, builds] = useGithubActions(query)\n  const [clickedBuild, setClickedBuild] = useState(undefined)\n\n  return (\n    <>\n      <h1>githubgraph-js - GitHub actions graphs</h1>\n      <p>Enter a repo name</p>\n      <RepoForm\n        initialValues={query}\n        onSubmit={(res) => {\n          setQuery(res)\n          forceRerender((c) => c + 1)\n        }}\n      />\n      {error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : loading ? (\n        <p>{loading}</p>\n      ) : (\n        <div style={{ display: 'flex' }}>\n          <VegaLite\n            data={{ values: builds }}\n            patch={(spec) => {\n              spec.signals.push({\n                name: 'barClick',\n                value: 0,\n                on: [{ events: '*:mousedown', update: 'datum' }],\n              })\n              return spec\n            }}\n            signalListeners={{\n              barClick: (command, args) => {\n                setClickedBuild(args)\n              },\n            }}\n            spec={{\n              $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n              width: 1000,\n              height: 400,\n              mark: { type: 'point', tooltip: { content: 'data' } },\n              data: { name: 'values' },\n              selection: {\n                grid: {\n                  type: 'interval',\n                  bind: 'scales',\n                },\n              },\n              encoding: {\n                y: {\n                  field: 'duration',\n                  type: 'quantitative',\n                  axis: {\n                    title: 'Duration (minutes)',\n                  },\n                },\n                x: {\n                  field: 'finished_at',\n                  timeUnit: 'yearmonthdatehoursminutes',\n                  type: 'temporal',\n                  scale: {\n                    nice: 'week', // add some padding/niceness to domain\n                  },\n                  axis: {\n                    title: 'Date',\n                  },\n                },\n                color: {\n                  field: 'state',\n                  type: 'nominal',\n                  scale: {\n                    domain: ['passed', 'failed', 'errored', 'canceled'],\n                    range: ['#39aa56', '#ff7f0e', '#db4545', '#9d9d9d'],\n                  },\n                },\n              },\n            }}\n          />\n          {clickedBuild ? (\n            <BuildDetails\n              repo={query.repo}\n              com={query.com ? 'com' : 'org'}\n              build={clickedBuild}\n            />\n          ) : null}\n        </div>\n      )}\n      <a href=\"https://github.com/cmdcolin/githubgraphjs/\">source code</a>\n    </>\n  )\n}\n","// stackoverflow\nexport function filterOutliers(someArray = []) {\n  if (!someArray.length) return []\n  const values = someArray.concat()\n  values.sort((a, b) => a.duration - b.duration)\n\n  const q1 = values[Math.floor(values.length / 4)].duration\n  const q3 =\n    values[Math.min(Math.ceil(values.length * (3 / 4)), values.length - 1)]\n      .duration\n  const iqr = q3 - q1\n\n  const maxValue = q3 + iqr * 3\n  const minValue = q1 - iqr * 3\n\n  return values.filter(\n    (x) => x.duration < maxValue && x.duration > minValue && !!x.finished_at\n  )\n}\nexport function isAbortException(exception) {\n  return (\n    // DOMException\n    exception.name === 'AbortError' ||\n    // standard-ish non-DOM abort exception\n    exception.code === 'ERR_ABORTED' ||\n    // stringified DOMException\n    exception.message === 'AbortError: aborted' ||\n    // stringified standard-ish exception\n    exception.message === 'Error: aborted'\n  )\n}\n","/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { QueryParamProvider } from 'use-query-params'\n\nReactDOM.render(\n  <QueryParamProvider>\n    <App />\n  </QueryParamProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}